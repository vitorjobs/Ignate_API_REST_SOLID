import fastifyJwt from "@fastify/jwt";
import { env } from "env";
import fastify from "fastify";
import { checkInsRoutes } from "http/controllers/check-ins/routes";
import { gymsRoutes } from "http/controllers/gyms/routes";
import { usersRoutes } from "http/controllers/users/routes";
import { appRoutes } from "http/routes";
import { ZodError } from "zod";
import fastifyCookie from '@fastify/cookie'

export const app = fastify()

app.register(fastifyJwt, {
	/**
	 * * @description	
	 * * ConfiguraÃ§Ã£o do JWT para autenticaÃ§Ã£o
	 * * e autorizaÃ§Ã£o na aplicaÃ§Ã£o.
	 * * O segredo Ã© armazenado em uma variÃ¡vel de ambiente
	 * * para maior seguranÃ§a.
	 * * O cookie Ã© configurado para armazenar o token de atualizaÃ§Ã£o		
	 * * * e tem uma duraÃ§Ã£o de 10 minutos.
	 * * * @param {string} env.JWT_SECRET - O segredo usado para assinar o token JWT.
	 * * * @param {object} cookie - ConfiguraÃ§Ãµes do cookie.
	 * * * @param {string} cookie.cookieName - Nome do cookie que armazenarÃ¡ o token de atualizaÃ§Ã£o.
	 * * * @param {boolean} cookie.signed - Indica se o cookie deve ser assinado.
	 * * * @param {object} sign - ConfiguraÃ§Ãµes de assinatura do token JWT.
	 * * * @param {string} sign.expiresIn - Tempo de expiraÃ§Ã£o do token JWT.
	 * *
	 * * @returns {object} - Retorna a configuraÃ§Ã£o do JWT.
	 * * @throws {Error} - LanÃ§a um erro se o segredo do JWT nÃ£o estiver definido.
	 */
	secret: env.JWT_SECRET,
	cookie: {
		cookieName: 'refreshToken',
		signed: false,
	},
	sign: {
		expiresIn: '10m',
	},
})

app.get('/about', () => {
	return {
		Projeto: "ðŸš€ SOLID API - Conceitos e Pratica",
		Tecnologias: "âœ¨ Plataforma Node | Liguagem Javascript | Bibliotecas",
		DocumentaÃ§Ã£o: "ðŸŽ¯ Criada via SWAGGER",
		Dependencies: {
			fastify: '4.0.0',
			prisma: '3.0.0',
			bcryptjs: '2.4.3',
			env: env.NODE_ENV || 'development',
			supertest: '6.1.6',
			vitest: '0.0.1',
		},
	}
})


// ROTA USER
// * ValidaÃ§Ã£o com a biblioteca ZOD para checar os tipos e valores dos dados.

app.register(usersRoutes)
app.register(gymsRoutes)
app.register(checkInsRoutes)
app.register(appRoutes)
app.register(fastifyCookie)
// FUNÃ‡ÃƒO GLOBAL PARA TARTAR ERROS NA APLICAÃ‡ÃƒO

app.setErrorHandler((error, _request, reply) => {
	if (error instanceof ZodError) {
		return reply
			.status(400)
			.send({ message: "Validation error.", issues: error.format() })
	}

	if (env.NODE_ENV != "productions") {
		console.log(error)
	} else {
		// TODO FAZER LOGO COM FERRAMENTA DE LOG
	}
	return reply.status(500).send({})
})	
